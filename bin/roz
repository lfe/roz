#!/usr/bin/env bash

DB_NAME=$(cat resources/config/company-name)
LIBS="ERL_LIBS=`lfetool info erllibs`"
SCRIPT_WRAP="-s roz-script format-run"
DB="-mnesia dir \'\"$DB_NAME\"\'"
#NODE="-sname roz"
NODE=""
START="-s mnesia start"
LFE="$LIBS ./deps/lfe/bin/lfe -noshell $NODE $DB $START $SCRIPT_WRAP"
LFE_INIT="$LIBS ./deps/lfe/bin/lfe -noshell $NODE $DB $SCRIPT_WRAP"
LFEC="$LIBS ./deps/lfe/bin/lfec"
FINISH="-s mnesia stop -s erlang halt"

print-usage () {
    scriptpath=$1
    scriptname=$(basename $scriptpath)
    command="$LFE roz-script-help usage $scriptpath $scriptname $FINISH"
    #echo "comand: $command"
    eval $command
}

error () {
    message=$1
    echo
    echo $message
    echo
    print-usage $script | clean-ok
    exit 1
}

unknown-command-error () {
    command=$1
    error "Unknown command: '$command'";
}

unknown-subcommand-error () {
    subcommand=$1
    error "Unknown subcommand: '$subcommand'";
}

clean-ok () {
    egrep -v '^ok$'
}

do-help () {
    echo
}

do-version () {
    echo
}

do-repl () {
    echo "Starting roz REPL ..."
    echo
    command="ERL_LIBS=$(lfetool info erllibs) \
    PATH=$(lfetool info path) lfe $DB $@"
    echo "command: $command"
    eval $command
}

do-init () {
    echo "Initializing roz data ..."
    echo
    command="$LFE_INIT roz init $FINISH"
    #echo "command: $command"
    eval $command
}

do-info-db () {
    echo "Getting DB info ..."
    echo
    command="$LFE mnesia info $FINISH"
    #echo "comand: $command"
    eval $command
}

do-info-table () {
    tablename=$1
    shift 1
    args=$@
    if [ "$args" = "" ]; then
        args=all
    fi
    echo "Getting table info for '$tablename' ..."
    echo
    command="$LFE roz-structure table-info roz-$tablename $args $FINISH"
    #echo "comand: $command"
    eval $command
}

do-add-group () {
    echo "Adding group '$1' ..."
    echo
    command="$LFE roz-content add-group $@ $FINISH"
    #echo "comand: $command"
    eval $command
}

do-add-team () {
    echo "Adding team '$1' ..."
    echo
    command="$LFE roz-content add-team $@ $FINISH"
    #echo "comand: $command"
    eval $command
}

do-add-product () {
    echo "Adding product '$1' ..."
    echo
    command="$LFE roz-content add-product $@ $FINISH"
    #echo "comand: $command"
    eval $command
}

do-list-groups () {
    echo "Getting list of all groups ..."
    echo
    command="$LFE roz-querying list-groups $FINISH"
    #echo "comand: $command"
    eval $command
}

do-list-teams () {
    echo "Getting list of all teams ..."
    echo
    command="$LFE roz-querying list-teams $FINISH"
    #echo "comand: $command"
    eval $command
}

do-list-products () {
    echo "Getting list of all products ..."
    echo
    command="$LFE roz-querying list-products $FINISH"
    #echo "comand: $command"
    eval $command
}

run-info () {
    subcommand=$1
    shift 1
    name=$2
    case $subcommand in
        db)
            echo
            do-info-db
            exit 0
            ;;
        table)
            echo
            do-info-table "$@"
            exit 0
            ;;
        *)
            unknown-subcommand-error $subcommand
            ;;
    esac
}

run-add () {
    subcommand=$1
    name=$2
    case $subcommand in
        group)
            echo
            do-add-group "$name"
            exit 0
            ;;
        team)
            echo
            do-add-team "$name"
            exit 0
            ;;
        product)
            echo
            do-add-product "$name"
            exit 0
            ;;
        *)
            unknown-subcommand-error $subcommand
            ;;
    esac
}

run-list () {
    subcommand=$1
    name=$2
    case $subcommand in
        groups)
            echo
            do-list-groups
            exit 0
            ;;
        teams)
            echo
            do-list-teams
            exit 0
            ;;
        products)
            echo
            do-list-products
            exit 0
            ;;
        *)
            unknown-subcommand-error $subcommand
            ;;
    esac
}
run () {
    script=$0
    command=$1
    subcommand=$2
    shift 2
    case $command in
        -h|help)
            print-usage $script $(basename script) | clean-ok
            exit 0
            ;;
        -v|version)
            do-version
            exit 0
            ;;
        init)
            do-init | clean-ok
            exit 0
            ;;
        info)
            run-info $subcommand "$@" | clean-ok
            exit 0
            ;;
        add)
            run-add $subcommand "$@" | clean-ok
            exit 0
            ;;
        list)
            run-list $subcommand "$@" | clean-ok
            exit 0
            ;;
        repl)
            shift 1
            do-repl "$@"
            exit 0
            ;;
        *)
            unknown-command-error $command
            ;;
    esac
}

run "$@"
